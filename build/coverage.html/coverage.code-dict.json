{"/home/travis/build/npmtest/node-npmtest-pg-async/test.js":"/* istanbul instrument in package npmtest_pg_async */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-async/lib.npmtest_pg_async.js":"/* istanbul instrument in package npmtest_pg_async */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pg_async = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pg_async = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-async/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pg-async && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pg_async */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pg_async\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pg_async.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pg_async.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pg_async.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pg_async.__dirname + '/lib.npmtest_pg_async.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pg-async/node_modules/pg-async/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQL = exports.identifier = exports.literal = exports.sqlStr = undefined;\n\nvar _sql = require('./sql');\n\nObject.defineProperty(exports, 'sqlStr', {\n  enumerable: true,\n  get: function get() {\n    return _sql.sqlStr;\n  }\n});\nObject.defineProperty(exports, 'literal', {\n  enumerable: true,\n  get: function get() {\n    return _sql.literal;\n  }\n});\nObject.defineProperty(exports, 'identifier', {\n  enumerable: true,\n  get: function get() {\n    return _sql.identifier;\n  }\n});\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _pg = require('pg');\n\nvar _pg2 = _interopRequireDefault(_pg);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _makeAsyncApi = require('./makeAsyncApi');\n\nvar _makeAsyncApi2 = _interopRequireDefault(_makeAsyncApi);\n\nvar _sql2 = _interopRequireDefault(_sql);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nconst SQL = exports.SQL = _sql2.default;\n\nfunction checkAsyncFunction(asyncFunc) {\n  if (typeof asyncFunc !== 'function') throw new TypeError('async function expected');\n}\n\nclass PgAsync {\n  constructor(connectionOptions, driver) {\n    this.SQL = _sql2.default;\n\n    this.closeConnections = () => this.getDriver().end();\n\n    this.setConnectionOptions(connectionOptions);\n    this.setDriver(driver);\n\n    const self = this;\n    const wrap = name => {\n      self[name] = function (sql) {\n        for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          values[_key - 1] = arguments[_key];\n        }\n\n        return self.connect(client => client[`${ name }Args`](sql, values));\n      };\n    };\n    const wrapArgs = name => {\n      self[name] = (sql, values) => self.connect(client => client[name](sql, values));\n    };\n\n    wrap('query');\n    wrapArgs('queryArgs');\n\n    wrap('rows');\n    wrapArgs('rowsArgs');\n\n    wrap('row');\n    wrapArgs('rowArgs');\n\n    wrap('value');\n    wrapArgs('valueArgs');\n  }\n\n  setConnectionOptions(options) {\n    this._connectionOptions = options;\n    return this;\n  }\n\n  getConnectionOptions() {\n    return this._connectionOptions || this.getDriver().defaults;\n  }\n\n  getDriver() {\n    return this._driver;\n  }\n\n  setDriver(driver) {\n    if (typeof driver === 'string') switch (driver) {\n      case '':case 'pg':\n        driver = _pg2.default;\n        break;\n      case 'native':case 'pg.native':\n        driver = _pg2.default.native;\n        break;\n      default:\n        throw new Error(`Unrecognized driver name: ${ driver }`);\n    }\n    this._driver = driver || _pg2.default;\n    return this;\n  }\n\n  getClient() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new _bluebird2.default(function (resolve, reject) {\n        _this.getDriver().connect(_this.getConnectionOptions(), function (err, client, _done) {\n          if (err) {\n            (0, _debug2.default)('%s getClient(%j)', err, _this.getConnectionOptions());\n            if (_done) _done(err);\n            return reject(err);\n          }\n          return resolve({\n            client: client,\n            done: function done() {\n              (0, _debug2.default)('Client released');\n              _done();\n            }\n          });\n        });\n      });\n    })();\n  }\n\n  connect(asyncFunc) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      checkAsyncFunction(asyncFunc);\n\n      var _ref = yield _this2.getClient();\n\n      const client = _ref.client,\n            done = _ref.done;\n\n      try {\n        const api = (0, _makeAsyncApi2.default)(client);\n        const result = yield asyncFunc(api);\n        yield api._end();\n        done();\n        return result;\n      } catch (err) {\n        done(err);\n        throw err;\n      }\n    })();\n  }\n\n  transaction(asyncFunc) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      checkAsyncFunction(asyncFunc);\n\n      return yield _this3.connect((() => {\n        var _ref2 = _asyncToGenerator(function* (client) {\n          client.checkSerialAccess = true;\n          yield client.startTransaction();\n          try {\n            const result = yield asyncFunc(client);\n            yield client.commit();\n            return result;\n          } catch (err) {\n            try {\n              yield client.rollback();\n            } catch (_) {\n              // client disconnected?\n            }\n            throw err;\n          }\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      })());\n    })();\n  }\n\n}\nexports.default = PgAsync;\nPgAsync.SQL = _sql2.default;","/home/travis/build/npmtest/node-npmtest-pg-async/node_modules/pg-async/lib/sql.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.escapeLiteral = exports.escapeIdentifier = exports.SqlFragment = undefined;\nexports.sqlStr = sqlStr;\nexports.identifier = identifier;\nexports.literal = literal;\nexports.insert_object = insert_object;\n\nvar _util = require('util');\n\nvar _pg = require('pg');\n\nvar _pg2 = _interopRequireDefault(_pg);\n\nvar _utils = require('pg/lib/utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet SQL; // eslint-disable-line prefer-const\n\nclass SqlFragment {\n\n  // SQL`insert into $quote${tableName} $values${keyValue}`;\n  constructor(templateParts, templateValues) {\n    this._parts = [];\n    this.values = [];\n\n    const length = templateValues.length;\n    const text = [];\n    let currentFragment = [];\n    let argIndex = 1;\n\n    let i = 0;\n\n    const addText = str => {\n      currentFragment.push(str);\n    };\n\n    const flushText = () => {\n      const fragment = currentFragment.join('');\n      currentFragment = [];\n      this._parts.push(fragment);\n      text.push(fragment);\n    };\n\n    const addValue = value => {\n      flushText();\n      this.values.push(value);\n      text.push('$', argIndex++);\n    };\n\n    while (i < length) {\n      const parts = templateParts[i].split('$');\n      let value = templateValues.shift();\n      if (typeof value === 'undefined') throw new Error(`Expected something, but got undefined. ` + `Value after SQL fragment: ${ text.join('') }${ templateParts[i] }`);\n\n      while (parts.length > 1) value = SQL.transform(parts.pop(), value);\n\n      addText(parts[0]);\n\n      if (value && value.toSQL) value = value.toSQL();\n\n      if (value instanceof SqlFragment) {\n        const nestedValuesLength = value.values.length;\n        let valueIndex = 0;\n        while (valueIndex < nestedValuesLength) {\n          addText(value._parts[valueIndex]);\n          addValue(value.values[valueIndex]);\n          valueIndex++;\n        }\n        addText(value._parts[valueIndex]);\n      } else {\n        addValue(value);\n      }\n      i++;\n    }\n    // last part is alone, without value\n    addText(templateParts[i]);\n    flushText();\n\n    this.text = text.join('');\n  }\n\n  // this is for log/debugging only\n  toString() {\n    if (this._asString) return this._asString;\n\n    const text = [];\n    const length = this.values.length;\n    let i = 0;\n    while (i < length) {\n      text.push(this._parts[i]);\n      const value = literal(this.values[i]);\n      text.push(value);\n      i++;\n    }\n    text.push(this._parts[i]);\n    this._asString = text.join('');\n    return this._asString;\n  }\n}\n\nexports.SqlFragment = SqlFragment;\nSQL = function SQL(parts) {\n  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  // eslint-disable-line prefer-const\n  // only one argument, called manually\n  if (!Array.isArray(parts) && values.length === 0) {\n    if (parts instanceof SqlFragment) return parts;\n\n    parts = [parts];\n  }\n\n  return new SqlFragment(parts, values);\n};\n\nSQL.NULL = SQL('NULL');\nSQL.DEFAULT = SQL('DEFAULT');\n\nSQL._transforms = {};\nSQL.registerTransform = function () {\n  for (var _len2 = arguments.length, names = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    names[_key2] = arguments[_key2];\n  }\n\n  const transform = names.pop();\n  if (typeof transform !== 'function') throw new Error('Last argument must be a function');\n\n  const transforms = SQL._transforms;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i].trim().toLowerCase();\n    if (transforms[name] && transforms[name] !== transform) throw new Error(`Transform ${ name } already registered`);\n    transforms[names[i].toLowerCase()] = transform;\n  }\n};\n\nSQL.transform = (name, value) => {\n  name = name.trim().toLowerCase();\n  const transform = SQL._transforms[name];\n  if (!transform) throw new Error(`Unknown transform: \"${ name }\"`);\n  return transform(value);\n};\n\nconst escapeIdentifier = exports.escapeIdentifier = _pg2.default.Client.prototype.escapeIdentifier;\nconst escapeLiteral = exports.escapeLiteral = _pg2.default.Client.prototype.escapeLiteral;\n\nfunction sqlStr(str) {\n  if (typeof str !== 'string') throw new Error(`Expected string, got ${ (0, _util.inspect)(str) }`);\n\n  return SQL(str);\n}\n\n// returns quoted identifier\nfunction identifier(name) {\n  if (!name) throw new Error(`Expected nonempty string, got ${ (0, _util.inspect)(name) }`);\n\n  return SQL(escapeIdentifier(name));\n}\n\n// returns quoted literal\nfunction literal(value) {\n  if (value instanceof SqlFragment) return value;\n\n  if (typeof value === 'undefined') throw new Error(`Expected something, but got undefined.`);\n\n  if (value === null) return SQL.NULL;\n\n  if (value.toPostgres) return SQL(escapeLiteral(value.toPostgres(_utils.prepareValue)));\n\n  if (value.toSQL) return SQL(value.toSQL());\n\n  return SQL(escapeLiteral(value.toString()));\n}\n\nfunction insert_object(data) {\n  const keys = Object.keys(data);\n  const length = keys.length;\n  const sqlFragments = new Array(length);\n  const values = new Array(length - 1);\n  const sb = [];\n\n  sb.push('(');\n  let i = 0;\n  while (i < length) {\n    const column = keys[i];\n    values[i] = data[column];\n    i++;\n    sb.push(escapeIdentifier(column), ',');\n    sqlFragments[i] = ',';\n  }\n  sb[sb.length - 1] = ') VALUES (';\n  sqlFragments[0] = sb.join('');\n  sqlFragments[i] = ')';\n\n  return new SqlFragment(sqlFragments, values);\n}\n\nSQL.registerTransform('id', 'ident', 'identifier', 'name', identifier);\nSQL.registerTransform('', 'literal', literal);\nSQL.registerTransform('!', 'raw', sqlStr);\nSQL.registerTransform('insert_object', 'insert', insert_object);\n\nexports.default = SQL;","/home/travis/build/npmtest/node-npmtest-pg-async/node_modules/pg-async/lib/debug.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _debug2.default)('pg-async');\n\nexports.default = debug;","/home/travis/build/npmtest/node-npmtest-pg-async/node_modules/pg-async/lib/makeAsyncApi.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _debug = require('./debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _sql = require('./sql');\n\nvar _sql2 = _interopRequireDefault(_sql);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nconst makeAsyncApi = client => {\n\n  let inQuery = false;\n\n  function query(sql) {\n    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n\n    return query.queryArgs(sql, values);\n  }\n\n  let _queryArgs = (sql, values) => {\n    if (sql instanceof _sql.SqlFragment) {\n      values = sql.values;\n      sql = sql.text;\n    }\n\n    inQuery = true;\n    return new _bluebird2.default((resolve, reject) => {\n      (0, _debug2.default)('query params: %s query: %j', JSON.stringify(values).slice(0, 60), sql);\n      client.query(sql, values, (err, result) => {\n        inQuery = false;\n        if (err) {\n          (0, _debug2.default)('%s query(%j, %j)', err, sql, values);\n          return reject(err);\n        }\n        (0, _debug2.default)('query ok: %d rows', result.rowCount);\n        return resolve(result);\n      });\n    });\n  };\n\n  query.SQL = _sql2.default;\n\n  query.query = function (sql) {\n    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      values[_key2 - 1] = arguments[_key2];\n    }\n\n    return query.queryArgs(sql, values);\n  };\n  query.queryArgs = (sql, values) => {\n    if (inQuery) throw new Error('Commands on same client should be called serially. ' + 'Do you forget `await`?');\n    return _queryArgs(sql, values);\n  };\n\n  query.rows = function (sql) {\n    for (var _len3 = arguments.length, values = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      values[_key3 - 1] = arguments[_key3];\n    }\n\n    return query.rowsArgs(sql, values);\n  };\n  query.rowsArgs = (sql, values) => query.queryArgs(sql, values).then(r => r.rows);\n\n  query.row = function (sql) {\n    for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      values[_key4 - 1] = arguments[_key4];\n    }\n\n    return query.rowArgs(sql, values);\n  };\n  query.rowArgs = (() => {\n    var _ref = _asyncToGenerator(function* (sql, values) {\n      const result = yield query.queryArgs(sql, values);\n      if (result.rowCount !== 1) throw new Error(`SQL: Expected exactly one row result but ${ result.rowCount } returned`);\n      return result.rows[0];\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  })();\n\n  query.value = (() => {\n    var _ref2 = _asyncToGenerator(function* (sql) {\n      for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        values[_key5 - 1] = arguments[_key5];\n      }\n\n      return query.valueArgs(sql, values);\n    });\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  })();\n  query.valueArgs = (() => {\n    var _ref3 = _asyncToGenerator(function* (sql, values) {\n      let opts;\n      if (sql instanceof _sql.SqlFragment) {\n        opts = _extends({}, sql, {\n          rowMode: 'array'\n        });\n        values = sql.values;\n      } else {\n        opts = typeof sql === 'string' ? { text: sql, rowMode: 'array' } : _extends({}, sql, { rowMode: 'array' });\n      }\n\n      const result = yield query.rowArgs(opts, values);\n      if (result.length !== 1) throw new Error(`SQL: Expected exactly one column but ${ result.length } returned`);\n      return result[0];\n    });\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  })();\n\n  query.inTransaction = false;\n\n  query.startTransaction = () => {\n    query.inTransaction = true;\n    return query.query('BEGIN');\n  };\n\n  query.commit = () => {\n    query.inTransaction = false;\n    return query.query('COMMIT');\n  };\n\n  query.rollback = () => {\n    query.inTransaction = false;\n    return _queryArgs('ROLLBACK', []);\n  };\n\n  query._end = () => {\n    const queryArgs = _queryArgs;\n    _queryArgs = () => {\n      throw new Error('Client was released.');\n    };\n    return new _bluebird2.default(resolve => {\n      if (inQuery) throw new Error('Client shutting down but query is pending. ' + 'Do you forget `await`?');\n\n      if (query.inTransaction) {\n        query.inTransaction = false;\n        queryArgs('ROLLBACK', []);\n        throw new Error('Transaction started manually but not closed. Automatic rollback');\n      }\n      resolve();\n    });\n  };\n\n  return query;\n};\n\nexports.default = makeAsyncApi;"}